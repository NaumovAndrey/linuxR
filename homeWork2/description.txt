Задание 1. Запуск ROS-узлов при старте системы

Создайте скрипт, который будет автоматически запускать ROS-узлы на роботе при старте системы. Используйте systemd. 

В качестве решения:

    Предоставьте исходный код скрипта (с указанием расположения файла), systemd unit-файл.
    Оставьте комментарии в решении или прикрепите краткое описание решения и его особенностей.
    Опишите шаги по установке и настройке решения.
    Подтвердите работоспособность: сделайте скриншоты вывода команды systemctl status, показывающие, что узлы ROS запускаются автоматически при старте системы, выводятся команды rosnode list и другие.

Задача 2. Автоматическое удаление файлов 

    Предположим, что у вас есть мобильный робот, на котором запускаются различные программы и записываются bag-файлы, они занимают много места на жёстком диске робота. 
        Чтобы избежать заполнения жёсткого диска и удаления старых файлов вручную, нужно создать скрипт bash, 
        который будет удалять bag-файлы старше заданного периода (например, после семи дней) в определённой папке на роботе. В этом скрипте необходимо:
        Задать условие, при котором скрипт будет выполнять работу. Например, когда на диске остаётся меньше 20% свободного места от общего объёма. 
        Все входные параметры (период времени, папка, порог свободного места) должны быть заданы через переменные в начале скрипта.
        Настроить автоматическое периодическое выполнение данного скрипта, используя cron или systemd.
    Создайте скрипт, который будет создавать файлы заданного размера с помощью команды dd, имитируя запись данных роботом. Используйте этот скрипт совместно со скриптом удаления файлов.

В качестве решения:

    Прикрепите готовый скрипт bash для удаления старых bag-файлов с робота.
    Подтвердите работоспособность кода: выведите команды df для проверки свободного места на диске, crontab -l или systemctl status — для проверки автоматического запуска скрипта через cron или systemd. Сделайте скриншоты.

Задача 3. Подсчёт общей продолжительности видеофайлов

    Создайте скрипт для автоматического подсчёта общей продолжительности всех видеофайлов (формата .mp4) в текущем каталоге и его подкаталогах. Продолжительность должна быть выведена в формате чч:мм:сс.
    Рекомендуем составить команду, которая сочетает использование инструментов find, ffprobe, awk для достижения цели задания. Вспомните о конвейерах (pipe) для передачи вывода одной команды на ввод другой команде.
    По желанию: реализуйте вывод продолжительности видео отдельно по папкам. 

Чтобы создать видеофайлы, можно использовать программу SimpleScreenRecorder для записи видео с экрана. Настройте вывод в файлы с расширением .mp4, сделайте несколько записей. 

В качестве решения:

    Предоставьте исходный код скрипта.
    Оставьте комментарии в решении или прикрепите краткое описание решения и его особенностей.
    Предоставьте подтверждение работоспособности: вывод скрипта и информацию о видеофайлах, которые находятся в папке (для проверки правильности подсчёта длительности).

Подсказки:

    Использование команды find.
    Она используется для поиска файлов в директории и выполнения действий с найденными файлами.
    Пример использования find для поиска всех файлов с расширением .mp4 в текущем каталоге и его подкаталогах:
    find . -name '*.mp4'
    Опция -exec позволяет выполнить указанную команду для каждого найденного файла. Символы {} в команде -exec заменяются именем текущего файла.
    Пример использования:
    find . -name '*.mp4' -exec command {} \;
    Использование команды ffprobe.
    ffprobe — это инструмент, который используется для анализа мультимедийных файлов и извлечения информации о них, например о продолжительности видео.
    Пример использования: 
    ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.mp4
    Использование команды awk.
    awk — это мощный инструмент обработки текста. В данном случае вы можете использовать его для подсчёта общей продолжительности и форматирования вывода.
    Пример использования для подсчёта общей суммы значений в первой колонке:
    awk '{s+=$1} END {print s}'
    Пример использования для форматирования времени в формат чч:мм:сс:
    awk '{printf "%d:%02d:%02d\n", s/3600, s%3600/60, s%60}'